/*
(c) 2013 Fengtao Fan
*/
#include "SimplicialComplexSP.h" 

#include <iostream>
#include <vector>
#include <cmath>
#include <sstream>
#include <unordered_set>

#include <boost/program_options.hpp>

void ComputingPersistenceForSimplicialMap(const char* file_name_of_domain_complex, 
										  bool is_domain_complex_with_annotation,
										  const char* file_name_of_range_complex,
										  const char* file_name_of_simplicial_map,
										  const char* persistence_file_name, 
										  bool is_save_range_complex_with_annotation = false,
										  const char* new_range_complex_file_name = NULL );

/***********************************************/
char * strLicenseSimPers = "THIS SOFTWARE IS PROVIDED \"AS-IS\". THERE IS NO WARRANTY OF ANY KIND. "
"NEITHER THE AUTHORS NOR THE OHIO STATE UNIVERSITY WILL BE LIABLE FOR "
"ANY DAMAGES OF ANY KIND, EVEN IF ADVISED OF SUCH POSSIBILITY. \n"
"\n"
"This software was developed (and is copyrighted by) the Jyamiti group at "
"The Ohio State University. Please do not redistribute this software. "
"This program is for academic research use only. This software uses the "
"Boost library (www.boost.org) "
"which is covered under their own licenses.\n"
"\n"
"The Boost library's license "
"(which applies to the Boost library ONLY and NOT to this program itself) is "
"as follows:\n"
"\n"
"LICENSE\n"
"---------------------------------------------------------------------------\n"
"Boost Software License - Version 1.0 - August 17th, 2003\n"
"\n"
"Permission is hereby granted, free of charge, to any person or organization "
"obtaining a copy of the software and accompanying documentation covered by "
"this license (the \"Software\") to use, reproduce, display, distribute, "
"execute, and transmit the Software, and to prepare derivative works of the "
"Software, and to permit third-parties to whom the Software is furnished to "
"do so, all subject to the following: \n"
"\n"
"The copyright notices in the Software and this entire statement, including "
"the above license grant, this restriction and the following disclaimer, "
"must be included in all copies of the Software, in whole or in part, and "
"all derivative works of the Software, unless such copies or derivative "
"works are solely in the form of machine-executable object code generated by "
"a source language processor. \n"
"\n"
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR "
"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, "
"FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT "
"SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE "
"FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, "
"ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER "
"DEALINGS IN THE SOFTWARE. \n"
"---------------------------------------------------------------------------\n";
/**********************************************************************/
bool ParseCommand(int argc, char** argv,
	std::string &input_domain_complex_file_name,
	std::string &input_range_complex_file_name,
	std::string &input_simplicial_map_fileName,
	std::string &output_range_complex_with_annotation_file_name,
	std::string &output_persistence_file_name,
	bool &is_input_domain_complex_with_annotation,
	bool &is_output_range_complex_with_annotation) 
{
	try
	{
		/* Define the program options description
		*/
		namespace po = boost::program_options;
		po::options_description desc("Simpers Usage");
		desc.add_options()
			(",h", "Help information;")
			(",l", "License information;")
			(",d", po::value<std::string>(&input_domain_complex_file_name)->required(), "The file name for the simplicial complex in the domain of the simplicial map;")
			(",r", po::value<std::string>(&input_range_complex_file_name)->required(), "The file name for the simplicial complex in the range of the simplicial map;")
			(",m", po::value<std::string>(&input_simplicial_map_fileName)->required(), "The file name for input simplicial map;")
			(",s", po::value<std::string>(&output_persistence_file_name)->required(), "The file name for saving the persistence of input simplicial map;")
			("rsave", po::value<std::string>(&output_range_complex_with_annotation_file_name)->default_value(""), "The file name for saving the range simplicial complex with annotations;")
			("rflag", po::value<bool>(&is_output_range_complex_with_annotation)->default_value(false), "The flag indicating to save range simplicial complex: yes (true) and no (false);")
			("dflag", po::value<bool>(&is_input_domain_complex_with_annotation)->default_value(false), "The flag indicating to read domain simplicial complex with available annotations: yes (true) and no (false);");
 		// Parser map
		po::variables_map vm;
		try
		{
			po::store(po::parse_command_line(argc, argv, desc), vm);

			//
			if (vm.count("-h"))
			{
				std::cout << desc << std::endl;
			}
			//
			if (vm.count("-l"))
			{
				std::cout << strLicenseSimPers << std::endl;
			}
			//
			po::notify(vm);
		}
		catch(boost::program_options::required_option& e)
		{
			std::cerr<< "ERROR: " << e.what() << std::endl;
			return false;
		}
		catch(boost::program_options::error& e)
		{
			std::cerr<< "ERROR: " << e.what() << std::endl;
			return false;
		}
	}
	catch(std::exception& e)
	{
		std::cerr << "Unhandled Exception reached the top of main: "
					<< e.what() << ", application will now exit" << std::endl;
		return false;

	}
	return true;
}

/*********************/
/*int main(int argc, char **argv)
{
	//
	std::string input_domain_complex_file_name;
	std::string input_range_complex_file_name;
	std::string input_simplicial_map_fileName;
	std::string output_range_complex_with_annotation_file_name;
	std::string output_persistence_file_name;
	bool is_input_domain_complex_with_annotation = false;
	bool is_output_range_complex_with_annotation = false; 

	//
	if (ParseCommand(argc, argv, input_domain_complex_file_name, 
		input_range_complex_file_name, 
		input_simplicial_map_fileName, 
		output_range_complex_with_annotation_file_name, 
		output_persistence_file_name, 
		is_input_domain_complex_with_annotation, 
		is_output_range_complex_with_annotation))
	{
		ComputingPersistenceForSimplicialMap(input_domain_complex_file_name.c_str(), is_input_domain_complex_with_annotation,
			input_range_complex_file_name.c_str(), input_simplicial_map_fileName.c_str(), output_persistence_file_name.c_str(), 
			is_output_range_complex_with_annotation, output_range_complex_with_annotation_file_name.c_str());
	}
	//
	return 0;
}*/
